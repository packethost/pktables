#!/usr/bin/env python

import packet 
import httplib, json
import time
import os, sys, argparse, collections
from netaddr import IPNetwork, IPAddress

if not "PACKETKEY" in os.environ:
	raise RuntimeError("PACKETKEY variable not set")

if not "PROJECTID" in os.environ:
	raise RuntimeError("PROJECTID variable not set")

PACKETKEY=os.environ.get('PACKETKEY')
PROJECTID=os.environ.get('PROJECTID')
RULESFILE=os.environ.get('RULESFILE', '/data/pktables.rules')
CHAIN=os.environ.get('CHAIN', 'PKTABLES')

manager = packet.Manager(auth_token=PACKETKEY)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Update iptables from Packet Production Project.')
	parser.add_argument('--dry-run', dest='dryrun', action="store_true", help='do not apply the changes, only display the rules that will be applied')
	args = parser.parse_args()

	networks = {}
	data = manager.call_api('projects/%s/ips' % PROJECTID)
	for block in data['ip_addresses']:
		if not block['management'] and block['address_family']==4:
			networks[block['network']] = IPNetwork(block['network'] +'/'+ str(block['cidr']))

	perpage = 500
	ds = manager.list_devices(PROJECTID, {'per_page': perpage})
	if perpage <= manager.meta['total']:
		raise RuntimeError("more devices than requested: %s" % manager.meta['total'])

	orphans = {}
	for d in ds:
		for ip in d.ip_addresses:
			if ip['address_family']==4:
				public = 'Public' if ip['public'] else 'Private'
				print 'checking %s' % ip['address']
				match = False
				for k,network in networks.iteritems():
					if IPAddress(ip['address']) in network:
						print '%s is in network %s' % (ip['address'], network.cidr)
						match = True
						break
				if not match:
						orphans[ip['address']] = 'iptables -A %s -s %s  -j ACCEPT -m comment --comment "%s %s v%i"' % (CHAIN, ip['address'], d.hostname, public, ip['address_family'])
	if args.dryrun:
		print "<< dry run >>"
		print "iptables -F %s" %CHAIN
		for k,network in sorted(networks.iteritems()):
			print "iptables -A %s -s %s  -j ACCEPT" % (CHAIN, network.cidr)
		for k,v in sorted(orphans.iteritems()):
			print v
		print "iptables -A %s -j RETURN" % CHAIN
	else:
		print "writing rules to %s" % RULESFILE
		target = open(RULESFILE, 'w')
		target.truncate()
		target.write("# Generated by pktables v1.0.00 on %s\n" % time.strftime("%a %b %d %H:%M:%S %Y"))
		target.write("iptables -F %s\n" % CHAIN)
		for k,network in sorted(networks.iteritems()):
			target.write("iptables -A %s -s %s  -j ACCEPT\n" % (CHAIN, network.cidr))
		for k,v in sorted(orphans.iteritems()):
			target.write(v)
			target.write("\n")
		target.write("iptables -A %s -j RETURN\n" % CHAIN)

		target.close()
